#include<bits/stdc++.h>			//hdu 1848
using namespace std;
#define ll long long
#define rep(i,n) for(int i = 0; i < n; ++i)
#define rep2(i,st,ed) for(int i = st; i <= ed; ++i)
#define mk(x,y) make_pair(x,y)
#define pb(x) push_back(x)
const ll mod = 1e9 + 7;
const ll N = 2e5 + 200;
const int INF = 0x3f3f3f3f;
const double eps = 1e-7;

int f[18];
int SG[N], S[N];

//SG函数,S数组存后继状态的SG函数值的集合，f为每次操作可以取的值
void getSG(int n){
	memset(SG, 0, sizeof(SG));
	for (int i = 1; i <= n; i++){
		memset(S, 0, sizeof(S));
		for (int j = 0; f[j] <= i && j <= 20; j++){
			S[SG[i - f[j]]] = 1;
		}
		for (int j = 0;;j++){
			if(!S[j]){
				SG[i] = j;
				break;
			}
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0),cout.tie(0);
	int n, m, p;
	f[0] = 1;
	f[1] = 1, f[2] = 2;
	for (int i = 3; i <= 16; i++)
	{
		f[i] = f[i - 1] + f[i - 2];
	}
	getSG(1000);
	while (~scanf("%d%d%d", &m, &n, &p) && (m + n + p))
	{
		if (SG[n] ^ SG[m] ^ SG[p])
		{
			printf("Fibo\n");
		}
		else
		{
			printf("Nacci\n");
		}
	}

	return 0;
}