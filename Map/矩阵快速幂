#include<bits/stdc++.h>     //洛谷 P1939
using namespace std;
#define ll long long
#define rep(i,n) for(int i = 0; i < n; ++i)
#define rep2(i,st,ed) for(int i = st; i < ed; ++i)
#define mk(x,y) make_pair(x,y)
#define pb(x) push_back(x)
const ll mod = 1e9+7;
const ll N = 2e5 + 200;
const int INF = 0x3f3f3f3f;
const double eps = 1e-7;

const int mlen = 3;
typedef struct Matrix{
    ll a[mlen][mlen];
    inline Matrix operator * (const Matrix &tmp){
        Matrix ret;
        memset(&ret, 0, sizeof(ret));
        rep(i,mlen){
            rep(j,mlen){
                rep(k,mlen){
                    ret.a[i][j] += a[i][k] * tmp.a[k][j]%mod;
                    ret.a[i][j] %= mod;
                }
            }
        }
        return ret;
    }
}Mat;

Mat ksm(Mat &a, ll m){
    Mat tmp;
    memset(&tmp, 0, sizeof(tmp));
    rep(i,mlen){
        tmp.a[i][i] = 1LL;
    }
    while(m){
        if(m&1LL) tmp = tmp * a;
        a = a * a;
        m >>= 1LL;
    }
    return tmp;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        ll n;
        cin>>n;
        Mat mt;
        memset(&mt, 0, sizeof(mt));
        mt.a[0][2] = mt.a[1][0] = 1;
        mt.a[2][1] = mt.a[2][2] = 1;
        if(n <= 3){
            cout<<1<<endl;
            continue;
        }
        Mat ans = ksm(mt, n - 3);
        printf("%lld\n", (ans.a[0][2] + ans.a[1][2] + ans.a[2][2])%mod);    //结果矩阵每一列都对于相应的结果
    }
}