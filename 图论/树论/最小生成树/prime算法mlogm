#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i,n) for(ll i = 0; i < n; i++)
#define rep2(i,start,end) for(ll i = start; i < end; i++)
#define dwn(i,n) for(int i = n; i >= 0; i--)
#define dwn2(i,start,end) for(ll i = start; i >= end; i--)
#define pll pair<ll,ll>
#define mk(x,y) make_pair(x,y)
#define pdl pair<double, ll>
const ll N = 4e5 + 200;
const ll INF = 0x3f3f3f;
const ll mod = 1e9 + 7;
typedef struct nod{
	int to,w,next;
}nod;
int head[N],tot;
nod edge[2*N];

void add(int x, int y, int w){
	edge[tot].to = y;
	edge[tot].w = w;
	edge[tot].next = head[x];
	head[x] = tot++; 
}

int dis[N],vis[N];

void init(){
	memset(head, -1, sizeof(head));
	tot = 0;
	memset(vis, 0, sizeof(vis));
	memset(dis, INF, sizeof(dis));
}

int prime(int n){
	int cnt = 0, sum = 0;
	dis[1] = 0;
	priority_queue<pair<int,int>, vector<pair<int,int> >,greater<pair<int,int> > > q;
	q.push(mk(0,1));
	while(!q.empty() && cnt < n){
		int x = q.top().first, y = q.top().second;
		q.pop();
		if(!vis[y]){
			vis[y] = 1;
			cnt++;
			sum += x;
			for(int i = head[y]; i != -1; i = edge[i].next){
				if(edge[i].w < dis[edge[i].to]){
					dis[edge[i].to] = edge[i].w;
					q.push(mk(dis[edge[i].to], edge[i].to));
				}
			}
		}
	}
	if(cnt == n) return sum;
		else return -1;
}

int main(){
	int n,m;
	init();
	scanf("%d%d",&n,&m);
	rep(i,m){
		int x,y,z;
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z);
		add(y,x,z);
	}
	int k = prime(n);
	if(k != -1){
		cout<<k<<endl;
	}else{
		cout<<"orz"<<endl;
	}



	return 0;
}




