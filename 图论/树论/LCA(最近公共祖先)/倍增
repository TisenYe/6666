#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i,n) for(ll i = 0; i < n; i++)
#define rep2(i,start,end) for(ll i = start; i <= end; i++)
#define pll pair<ll,ll>
#define mk(x,y) make_pair(x,y)
#define pdl pair<double, ll>
const ll N = 6e5 + 300;
const ll INF = 9999999999;
const ll mod = 1e9 + 7;


struct nod
{
	int next,v;	
}edge[N<<1];
int head[N];
int d[N];			//d数组记录深度
int tot;
int f[N][22], lg[N];		//f数组记录倍增的父节点，lg为跳跃最大距离

void add(int u, int v){
	edge[tot].next = head[u], edge[tot].v = v, head[u] = tot++;
	edge[tot].next = head[v], edge[tot].v = u, head[v] = tot++;
}

void init(int n){
	for(int i = 0; i <= n+1; i++){
		head[i] = -1, d[i] = 0;
	}
	tot = 0;
}

void dfs(int x, int fa){
	d[x] = d[fa]+1;
	f[x][0] = fa;
	for(int i = 1; (1<<i) <= d[x]; i++){
		f[x][i] = f[f[x][i-1]][i-1];
	}
	for(int i = head[x]; ~i; i = edge[i].next){
		int v = edge[i].v;
		if(v != fa){
			dfs(v, x);
		}
	}
}

int LCA(int x, int y){
	if(d[x] < d[y]) swap(x, y);
	while(d[x] > d[y]){
		x = f[x][lg[d[x] - d[y]] - 1];
	}
	if(x == y) return x;
	for(int i = lg[d[x]] - 1; i >= 0; i--){
		if(f[x][i] != f[y][i]){
			x = f[x][i];
			y = f[y][i];
		}
	}
	return f[x][0];
}


int main(){
    std::ios::sync_with_stdio(false);
    cin.tie(0),cout.tie(0);
    int n,m,root;
    cin>>n>>m>>root;
    init(n);
    ll x,y;
    rep(i,n-1){
    	cin>>x>>y;
    	add(x,y);
    }
    dfs(root, 0);
    for(int i = 1; i <= n; i++){
    	lg[i] = lg[i-1] + (1<<lg[i-1] == i);
    }
    while(m--){
    	ll a,b;
    	cin>>a>>b;
    	cout<<LCA(a,b)<<endl;
    }


	return 0;
}



