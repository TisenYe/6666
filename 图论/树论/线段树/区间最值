#include <iostream>
using namespace std;
typedef long long ll;
const int MAXN = 100010;
struct Node {
    int l, r;
    ll lazy;
    ll sum,mx,mi;
} segTree[MAXN * 4];
void build(int i, int l, int r) {
    segTree[i].l = l;
    segTree[i].r = r;
    if (l == r) {
        scanf("%lld", &segTree[i].sum);
        segTree[i].mx = segTree[i].mi = segTree[i].sum;
        return;
    }
    int mid = (l + r) >> 1;
    build(i << 1, l, mid);
    build(i << 1 | 1, mid + 1, r);
    segTree[i].sum = segTree[i << 1].sum + segTree[i << 1 | 1].sum;
    segTree[i].mx = max(segTree[i<<1].mx, segTree[i<<1|1].mx);
    segTree[i].mi = min(segTree[i<<1].mi, segTree[i<<1|1].mi);
}
void push_up(int i, ll v) {
    segTree[i].sum += (segTree[i].r - segTree[i].l + 1) * v;
    segTree[i].lazy += v;
}
void push_down(int i) {
    if (segTree[i].l == segTree[i].r) return;
    push_up(i << 1, segTree[i].lazy);
    push_up(i << 1 | 1, segTree[i].lazy);
    segTree[i].lazy = 0;
}
void add(int i, int l, int r, ll v) {
    if (segTree[i].l >= l && segTree[i].r <= r) {
        push_up(i, v);
        return;
    }
    push_down(i);
    int mid = (segTree[i].l + segTree[i].r) >> 1;
    if (mid >= l) add(i << 1, l, r, v);
    if (mid < r) add(i << 1 | 1, l, r, v);
    segTree[i].sum = segTree[i << 1].sum + segTree[i << 1 | 1].sum;
}

ll query(int i, int l, int r) {
    if (segTree[i].l == l && segTree[i].r == r) return segTree[i].mx;
    push_down(i);
    int mid = (segTree[i].l + segTree[i].r) >> 1;
    if (r <= mid) return query(i << 1, l, r);
    else if (l > mid) return query(i << 1 | 1, l, r);
    else return max(query(i << 1, l, mid) , query(i << 1 | 1, mid + 1, r));
}
ll query_mi(int i, int l, int r) {
    if (segTree[i].l == l && segTree[i].r == r) return segTree[i].mi;
    push_down(i);
    int mid = (segTree[i].l + segTree[i].r) >> 1;
    if (r <= mid) return query_mi(i << 1, l, r);
    else if (l > mid) return query_mi(i << 1 | 1, l, r);
    else return min(query_mi(i << 1, l, mid) , query_mi(i << 1 | 1, mid + 1, r));
}
int main() {
    int n, m, op;
    scanf("%d%d", &n, &m);
    build(1, 1, n);
    int l, r; 
	ll v;
    while (m--) {
        scanf("%d%d",&l, &r);
        // cout<<query(1,l,r)<<" "<<query_mi(1,l,r)<<endl;
        printf("%lld\n", query(1,l,r) - query_mi(1,l,r));
    }
    return 0;
}