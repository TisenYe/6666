
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i,n) for(int i = 0; i < n; ++i)
#define rep2(i,st,ed) for(int i = st; i < ed; ++i)
#define mk(x,y) make_pair(x,y)
#define pb(x) push_back(x)
const ll mod = 1e9 + 7;
const ll N = 2e5 + 200;
const int INF = 0x3f3f3f3f;
const double eps = 1e-7;

struct node{
	ll l,r;
	mutable ll v;
	node(ll l, ll r, ll v): l(l), r(r), v(v){}
	bool operator < (const node & a) const{		//重载小于运算符，放到set中去
		return l < a.l;
	}
};

set<node> tree;

typedef set<node>::iterator IT;

IT split(ll pos){							//断开整体区间，返回需要区间坐标位子
	IT it = tree.lower_bound(node(pos, 0, 0));
	if(it != tree.end() && it->l == pos){
		return it;
	}
	it--;
	ll l = it->l, r = it->r, v = it->v;
	tree.erase(it);
	tree.insert(node(l, pos-1, v));
	return tree.insert(node(pos, r, v)).first;
}

void assing(ll l, ll r, ll v){			//区间赋值， l，r区间赋值为v
	IT end = split(r+1), begin = split(l);
	tree.erase(begin, end);
	tree.insert(node(l, r, v));
}

int main(){
	ios::sync_with_stdio(false);
	ll n,m;
	cin>>n>>m;
	tree.insert(node(0,n,1));
	rep(i,m){
		ll x,y;
		cin>>x>>y;
		assing(x, y, 0);
	}	
	ll sum = 0;
	for(node x : tree){
		sum += x.v * (x.r - x.l + 1);
	}	
	cout<<sum<<endl;
	return 0;
}